@using kitchenator.Domain.Concepts.Realestate;
@using kitchenator.Domain.Concepts.Addresses; 
@using kitchenator.Domain.Contracts;

@inject IModelReaderFor<Restaurant> reader;

@if(_filteredRestaurants is { })
{
    <h3>Choose Restaurant</h3>

    <table class="table table-hover">
        <thead>
            <tr>
                <th>Restaurant</th>
                <th>City</th>
                <th>Chef Capacity</th>
                <th>Monthly Rent</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var restaurant in _filteredRestaurants)
            {
            <tr @onclick="@(() => SelectedRestaurant.Instance = restaurant)">
                <td>@restaurant.Name</td>
                <td>@restaurant.Address.City.CityName</td>
                <td>@restaurant.ChefCapacity</td>
                <td>€@restaurant.MonthlyRent.ToString("### ### ###.00")</td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public ViewModel<Restaurant> SelectedRestaurant { get; set; }

    [Parameter]
    public ViewModel<Country> CountryFilter { get; set; }

    [Parameter]
    public ViewModel<City> CityFilter { get; set; }

    [Parameter]
    public ViewModel<List<Restaurant>> FilteredRestaurants { get;  set; }

    List<Restaurant> _restaurants;
    List<Restaurant> _filteredRestaurants;


    protected override async Task OnInitializedAsync()
    {
        _restaurants = (await reader.GetAll()).ToList();
        _filteredRestaurants = new List<Restaurant>(_restaurants);

        CityFilter.OnChange     += UpdateFilteredRestaurants;
        CountryFilter.OnChange  += UpdateFilteredRestaurants;
        await Task.CompletedTask;
    }

    void UpdateFilteredRestaurants(object sender, Country country)
    {
        if(country is { })
        {
            _filteredRestaurants = _restaurants.Where(r => r.Address.City.CountryCode.Equals(country.CountryCode)).ToList();
            CityFilter.Instance  = null;
        }
        else
        {                        
            _filteredRestaurants = _restaurants;            
        }
        FilteredRestaurants = new ViewModel<List<Restaurant>>(_filteredRestaurants);
        StateHasChanged();
    }

    private void UpdateFilteredRestaurants(object sender, City city)
    {
        if(CountryFilter.Instance is { })
        {
            _filteredRestaurants = _restaurants.Where(r => r.Address.City.CountryCode.Equals(CountryFilter.Instance.CountryCode)).ToList();
            if(city is { })
            {
                _filteredRestaurants = _filteredRestaurants.Where(r => r.Address.City.Key.Equals(city.Key)).ToList();
            }
        }
        else
        {
            _filteredRestaurants = _restaurants;
        }
        StateHasChanged();
        FilteredRestaurants = new ViewModel<List<Restaurant>>(_filteredRestaurants);

    }

    private static string GuidToShortSweetness(Restaurant restaurant)
    {
        var uglyGuid = restaurant.Id.ToString();
        return $"{uglyGuid.Substring(0, 5)}...";
    }
}

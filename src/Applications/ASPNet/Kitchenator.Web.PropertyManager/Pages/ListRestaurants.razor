@page "/listRestaurants"

@using kitchenator.Domain.Contracts.Managers;
@using kitchenator.Domain.Concepts.Addresses;
@using kitchenator.Domain.Concepts.Realestate;
@using Kitchenator.Web.PropertyManager.Components;


@inject ICountriesLoader CountriesLoader        


<h1 style="font-family: Chiller; font-size: 56pt;">Terrible Tacos Restaurant List</h1>
@if (filteredRestaurants is { } && filteredRestaurants.Instance.Any())
{
    var theList = filteredRestaurants.Instance;
    <hr />
    <h3>Capacity and Cost</h3>

    <div class="alert-info">
        You are currently spending a total of <b>€@theList.Sum(r => r.MonthlyRent.Value).ToString("### ### ###.0")</b> on
        monthly rent across @theList.Count().ToString("### ###") restaurants.<br />
        Total capacity: <b>@theList.Sum(r => r.ChefCapacity.Value).ToString("### ###")</b> employees.
    </div>
    <hr />
}


<h3>List of Restaurants</h3>
<EditForm EditContext="@editContext">

    <SelectCountryAndCity SelectedCountry="@selectedCountry" SelectedCity="@selectedCity" />
    <RestaurantList         
        SelectedRestaurant="selectedRestaurant" 
        CityFilter="selectedCity" 
        CountryFilter="selectedCountry" 
        FilteredRestaurants="filteredRestaurants" />

</EditForm>



@code
{
    private EditContext editContext;
    private object dummyObject = new object();

    private ViewModel<List<Restaurant>> filteredRestaurants { get; set; }
    private ViewModel<Restaurant> selectedRestaurant { get; set; }
    private ViewModel<Country> selectedCountry { get; set; }
    private ViewModel<City> selectedCity { get; set; }

    protected override void OnInitialized()
    {
        editContext = new EditContext(dummyObject);
    }

    protected override async Task OnInitializedAsync()
    {
        // Grab all restaurants, we will never reach an amount that is problematic
        filteredRestaurants = new ViewModel<List<Restaurant>>(new List<Restaurant>());
        selectedRestaurant  = new ViewModel<Restaurant>(new Restaurant());
        selectedCountry     = new ViewModel<Country>(new Country());
        selectedCity        = new ViewModel<City>(new City());

        selectedCountry.OnChange += (s, e) => selectedCity.Instance = null;
    }
}
